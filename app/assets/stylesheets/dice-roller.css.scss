@import "compass/css3";

$containerWidth: 200px;
$containerHeight: $containerWidth;

$upperHeight: $containerWidth*0.5;
$lowerHeight: $containerWidth*0.12;
$internalWidth: $upperHeight*0.52;

$transitionDuration: 0.5s;
$animationDuration:  3s;

$angle: 45deg;
$sideAngle: 360deg/5;
$opacity: 0.75;
$color: rgba(30, 180, 20, $opacity);

$translateZ: $upperHeight*0.34;
$translateY: $lowerHeight*0.29;
$translateLowerZ: -$translateZ;
$translateLowerY: -$translateY;
$rotateX: $angle;

@mixin keyframes($name) {
  @-moz-keyframes #{$name} { @content; }
  @-webkit-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

@mixin animation($value...) {
  @include experimental(animation, $value, -moz, -webkit, -o, -ms, not -khtml, official);
}

@include keyframes(roll) {
  10% { @include transform(rotateX(0deg) rotateY(0deg) rotateZ(0deg)) }
  30% { @include transform(rotateX(120deg) rotateY(240deg) rotateZ(0deg)) }
  50% { @include transform(rotateX(240deg) rotateY(480deg) rotateZ(0deg)) }
  70% { @include transform(rotateX(360deg) rotateY(720deg) rotateZ(0deg)) }
  90% { @include transform(rotateX(480deg) rotateY(960deg) rotateZ(0deg)) }
}

.dice-roller {
  margin: auto auto;
  width: $containerWidth;
  height: $containerHeight;
  @include perspective(1500px);

  .d10 {
    position: absolute;
    width: 100%;
    height: 100%;
    @include transform-style;
    @include transition(transform $transitionDuration ease-out);
    cursor: pointer;

    @include transform(rotateX(-$angle));

    &.reset {
      @include transition(transform 0.1s ease-out);
      @include transform(rotateX(0));
    }

    &.rolling {
      @include animation(roll $animationDuration linear);
    }

    @for $i from 1 through 10 {
      &[data-face="#{$i}"] {
        @if $i % 2 == 0 {
          $angleMultiplier: $i / 2;
          @include transform(rotateX(-$angle) rotateY($sideAngle * $angleMultiplier));
        } @else {
          $angleMultiplier: ($i + 1) / 2;
          @include transform(rotateX(-180deg - $angle) rotateY(-$sideAngle * $angleMultiplier));
        }
      }
    }

    @for $i from 0 through 9 {
      .face.face-#{$i} {

        @if $i % 2 == 0 {
          // even sides are in the upper position of the die

          $angleMultiplier: $i / 2;
          @include transform(rotateY(-$sideAngle * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle));

        } @else {

          // odd sides are in the lower position of the die
          top: $upperHeight;

          $angleMultiplier: ($i + 1) / 2;
          @include transform(rotateY($sideAngle * $angleMultiplier) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateY(180deg) rotateX($angle));

        }

      }
    }

    .face {
      $horizontalMargin: -$internalWidth;

      position: absolute;
      left: 50%;
      top: 0;
      margin: 0 $horizontalMargin;
      border-left: $internalWidth solid transparent;
      border-right: $internalWidth solid transparent;
      border-bottom: $upperHeight solid $color;
      width: 0px;
      height: 0px;
      @include transform-style;
      @include backface-visibility;

      counter-increment: steps 1;

      &:first-child {
        counter-increment: steps 0;
      }

      &:before {
        content: counter(steps);
        position: absolute;
        top: $upperHeight*0.25;
        left: -$internalWidth;
        color: #fff;
        text-shadow: 1px 1px 3px #000;
        font-size: $upperHeight*0.6;
        text-align: center;
        line-height: $upperHeight;
        width: $internalWidth*2;
        height: $upperHeight;
      }

      &:after {
        content: "";
        position: absolute;
        bottom: -($upperHeight + $lowerHeight);
        left: -$internalWidth;
        border-left: $internalWidth solid transparent;
        border-right: $internalWidth solid transparent;
        border-top: $lowerHeight solid $color;
        width: 0px;
        height: 0px;
      }
    }
  }
}
