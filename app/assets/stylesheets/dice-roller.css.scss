@import "compass/css3";

$largeContainerWidth:   400px;
$defaultContainerWidth: 200px;
$smallContainerWidth:   100px;
$miniContainerWidth:     50px;

@mixin keyframes($name) {
  @-moz-keyframes #{$name} { @content; }
  @-webkit-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

@mixin animation($value...) {
  @include experimental(animation, $value, -moz, -webkit, -o, -ms, not -khtml, official);
}

@include keyframes(roll) {
  25% { @include transform(rotateX(0deg) rotateY(0deg) rotateZ(0deg)) }
  50% { @include transform(rotateX(120deg) rotateY(240deg) rotateZ(0deg)) }
  75% { @include transform(rotateX(240deg) rotateY(480deg) rotateZ(0deg)) }
}

@mixin dice-base-animation() {
  $transitionDuration: 0.5s;
  $animationDuration:  1s;

  @include transition(transform $transitionDuration ease-out);

  &.reset {
    @include transition(transform 0.1s ease-out);
    @include transform(rotateX(0));
  }

  &.rolling {
    @include animation(roll $animationDuration linear);
  }
}

@mixin d10($containerWidth) {
  $containerHeight: $containerWidth;

  $upperHeight: $containerWidth*0.5;
  $lowerHeight: $containerWidth*0.12;
  $internalWidth: $upperHeight*0.52;

  $angle: 45deg;
  $sideAngle: 360deg/5;

  $translateZ: $upperHeight*0.34;
  $translateY: $lowerHeight*0.29;
  $translateLowerZ: -$translateZ;
  $translateLowerY: -$translateY;
  $rotateX: $angle;

  @include transform(rotateX(-$angle));

  @for $i from 1 through 10 {
    &[data-face="#{$i}"] {
      @if $i % 2 == 0 {
        $angleMultiplier: $i / 2;
        @include transform(rotateX(-$angle) rotateY($sideAngle * $angleMultiplier));
      } @else {
        $angleMultiplier: ($i + 1) / 2;
        @include transform(rotateX(-180deg - $angle) rotateY(-$sideAngle * $angleMultiplier));
      }
    }
  }

  .face {
    $horizontalMargin: -$internalWidth;

    margin: 0 $horizontalMargin;
    border-left: $internalWidth solid transparent;
    border-right: $internalWidth solid transparent;

    border-bottom-width: $upperHeight;

    &:before {
      top: $upperHeight*0.25;
      left: -$internalWidth;
      font-size: $upperHeight*0.6;
      line-height: $upperHeight;
      width: $internalWidth*2;
      height: $upperHeight;
    }

    &:after {
      bottom: -($upperHeight + $lowerHeight);
      left: -$internalWidth;
      border-left: $internalWidth solid transparent;
      border-right: $internalWidth solid transparent;
      border-top-width: $lowerHeight;
    }

    @for $i from 0 through 9 {
      &.face-#{$i} {

        @if $i % 2 == 0 {
          // even sides are in the upper position of the die

          $angleMultiplier: $i / 2;
          @include transform(rotateY(-$sideAngle * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle));

        } @else {

          // odd sides are in the lower position of the die
          top: $upperHeight;

          $angleMultiplier: ($i + 1) / 2;
          @include transform(rotateY($sideAngle * $angleMultiplier) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateY(180deg) rotateX($angle));

        }

      }
    }
  }
}

@mixin d20($containerWidth) {
  $containerHeight: $containerWidth;

  $faceWidth:  $containerWidth*0.5;
  $faceHeight: $faceWidth*0.86;

  $angle: 53deg;
  $ringAngle: -11deg;
  $sideAngle: 360deg/5;

  $rotateX: -$angle;
  $translateZ: $faceWidth*0.335;
  $translateY: -$faceHeight*0.15;
  $translateRingZ: $faceWidth*0.75;
  $translateRingY: $faceHeight*0.78 + $translateY;
  $translateLowerZ: $translateZ;
  $translateLowerY: $faceHeight*0.78 + $translateRingY;

  @include transform(rotateX($rotateX));

  @for $i from 1 through 5 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 1;
      @include transform(rotateX(-$angle) rotateY($sideAngle * $angleMultiplier));
    }
  }

  @for $i from 16 through 20 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 15;
      @include transform(rotateX(-$angle + 180deg) rotateY(-$sideAngle * $angleMultiplier));
    }
  }

  @for $i from 6 through 10 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 6;
      @include transform(rotateX(-$ringAngle) rotateZ(180deg) rotateY($sideAngle * $angleMultiplier));
    }
  }

  @for $i from 11 through 15 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 8;
      @include transform(rotateX(-$ringAngle) rotateY(-$sideAngle * $angleMultiplier - $sideAngle/2));
    }
  }

  .face {
    $horizontalMargin: -$faceWidth*0.5;

    margin: 0 $horizontalMargin;
    border-left: $faceWidth*0.5 solid transparent;
    border-right: $faceWidth*0.5 solid transparent;
    border-bottom-width: $faceHeight;

    &:before {
      top: $faceHeight*0.25;
      left: -$faceWidth;
      font-size: $faceHeight*0.5;
      line-height: $faceHeight*0.9;
      width: $faceWidth*2;
      height: $faceHeight;
    }

    @for $i from 1 through 5 {
      &.face-#{$i} {
        $angleMultiplier: $i - 1;
        @include transform(rotateY(-$sideAngle * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle));
      }
    }

    @for $i from 16 through 20 {
      &.face-#{$i} {
        $angleMultiplier: $i - 18;
        @include transform(rotateY($sideAngle * $angleMultiplier + $sideAngle/2) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateX($angle));
      }
    }

    @for $i from 6 through 10 {
      &.face-#{$i} {
        $angleMultiplier: $i - 11;
        @include transform(rotateY(-$sideAngle * $angleMultiplier) translateZ($translateRingZ) translateY($translateRingY) rotateZ(180deg) rotateX($ringAngle));
      }
    }

    @for $i from 11 through 15 {
      &.face-#{$i} {
        $angleMultiplier: $i - 8;
        @include transform(rotateY($sideAngle * $angleMultiplier + $sideAngle/2) translateZ($translateRingZ) translateY($translateRingY) rotateX($ringAngle));
      }
    }
  }
}

@mixin dice-color($background-color: rgba(30, 180, 20, 0.75), $color: #fff, $text-shadow: 1px 1px 3px #000) {
  .face {
    border-bottom-color: $background-color;

    &:before {
      color: $color;
      text-shadow: $text-shadow;
    }

    &:after {
      border-top-color: $background-color;
    }
  }
}

.dice-roller {
  margin: auto auto;
  width: $defaultContainerWidth;
  height: $defaultContainerWidth;
  @include perspective(1500px);

  .dice {
    position: absolute;
    width: 100%;
    height: 100%;
    @include transform-style;
    cursor: pointer;

    &.disabled {
      opacity: 0.7;
    }

    .face {
      position: absolute;
      left: 50%;
      top: 0;
      width: 0px;
      height: 0px;

      border-bottom-style: solid;

      @include transform-style;
      @include backface-visibility;

      counter-increment: steps 1;

      &:before {
        content: counter(steps);
        position: absolute;
        text-align: center;
      }

      &:after {
        content: "";
        position: absolute;
        width: 0px;
        height: 0px;

        border-top-style: solid;
      }
    }
  }

  .d10 {
    @include d10($defaultContainerWidth);
    @include dice-color;
    @include dice-base-animation;

    .face {
      &:first-child {
        counter-increment: steps 0;
      }
    }
  }

  .d20 {
    @include d20($defaultContainerWidth);
    @include dice-color;
    @include dice-base-animation;
  }

  &.dice-roller-large {
    width: $largeContainerWidth;
    height: $largeContainerWidth;

    .d10 {
      @include d10($largeContainerWidth);
    }

    .d20 {
      @include d20($largeContainerWidth);
    }
  }

  &.dice-roller-small {
    width: $smallContainerWidth;
    height: $smallContainerWidth;

    .d10 {
      @include d10($smallContainerWidth);
    }

    .d20 {
      @include d20($smallContainerWidth);
    }
  }

  &.dice-roller-mini {
    width: $miniContainerWidth;
    height: $miniContainerWidth;

    .d10 {
      @include d10($miniContainerWidth);
    }

    .d20 {
      @include d20($miniContainerWidth);
    }
  }

  &.dice-roller-red {
    @include dice-color(rgba(226, 60, 26, 0.75));
  }

  &.dice-roller-yellow {
    @include dice-color(rgba(216, 218, 25, 0.75));
  }

  &.dice-roller-blue {
    @include dice-color(rgba(35, 70, 171, 0.75));
  }

  &.dice-roller-black {
    @include dice-color(rgba(30, 30, 30, 0.75));
  }

  &.dice-roller-white {
    @include dice-color($background-color: rgba(255, 255, 255, 0.75), $color: #333, $text-shadow: 1px 1px 3px #fff);
  }
}
